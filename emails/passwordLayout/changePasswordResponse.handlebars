<html>
  <head>
    <link rel="icon" type="image/png" href="/images/favicon.png" />
    <title>Change Password</title>
    <style type="text/css">
      body { margin: 0; font-family: "Roboto", sans-serif; color: #021632; }
      .app-ico-svg { width: 3.5rem; } .main-container { height: 100vh; width:
      100vw; background-color: #021632; display: flex; justify-content: center;
      align-content: center; overflow-y: auto; overflow-x: hidden; } .contained
      { display: flex; flex-direction: column; width: 30%; height: fit-content;
      min-width: 20rem; } .card { background-color: #e4ebf8; width: 100%;
      position: relative; box-shadow: 0 4px 20px 0 rgba(162, 162, 162, 0.5);
      box-sizing: border-box; padding: 1.5rem; display: flex; flex-direction:
      column; line-height: 2rem; height: fit-content; min-width: 30rem; }
      .error-shadow { box-shadow: 0 4px 20px 0 rgba(253, 80, 103, 0.5); }
      .success-shadow { box-shadow: 0 4px 20px 0 rgba(33, 230, 193, 0.5); }
      .card-header { font-size: clamp(1vmin, 1.8rem, 2.5vmax); font-weight: 700;
      } .card-content { font-size: clamp(1.5vmin, 1.6rem, 2vmax); padding:
      3.75rem 0rem 2.75rem 0rem; display: flex; flex-direction: column; }
      .card-button { position: relative; width: 15rem; height: 4rem; background:
      #21e6c1; color: #021632; font-size: 1.25rem; font-weight: 700;
      text-transform: uppercase; border-radius: 5px; align-self: center; border:
      0; cursor: pointer; transition: all 250ms ease-in-out; overflow: hidden; }
      .card-button:disabled { background: #dbe3f0; color: #02163276; cursor:
      none; pointer-events: none; } .card-button:hover { background: #23d8b7;
      transition: all 150ms ease-in-out; } .card-footer { height: 1.5rem; width:
      100%; background-color: #818da050; position: absolute; left: 0; bottom: 0;
      } .card-footer-success { background-color: #21e6c1; transition: all 150ms
      ease-in-out; } .card-footer-error { background-color: #fd5066; transition:
      all 150ms ease-in-out; } .outer-container { height: fit-content; width:
      100%; display: flex; flex-direction: row; align-items: center;
      justify-content: center; padding-top: 2.5rem; padding-bottom: 2.5rem;
      min-width: 30rem; } .outer-container-image { width: 10rem; height: 10rem;
      color: #e4ebf8; } .outer-container-text { color: #e4ebf8; font-size:
      clamp(1.5vmin, 2rem, 2.5vmax); font-weight: 700; padding-top: 2.5rem;
      padding-bottom: 2.5rem; padding-left: 2.5rem; text-transform: uppercase; }
      .form-container { width: 100%; display: flex; flex-direction: column; gap:
      1.75rem; } .form-container > .container { align-self: flex-end; }
      .form-container > :nth-child(2) { padding-top: 1.25rem; } .text-input {
      display: flex; align-items: center; position: relative; box-sizing:
      border-box; } .text-input-field { height: 4.25rem; width: 100%;
      padding-left: 3.5rem; align-content: center; caret-color: #021632;
      -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing:
      border-box; border-radius: 5px; border-style: solid; border-color:
      #e4ebf8; border-width: 1px; font-size: 1.25rem; }
      .text-input-field:disabled { border-color: #d8dce3; }
      .text-input-field:hover:disabled { border-color: #d8dce3; }
      .text-input-field::selection { color: #021632; background: #21e6c1; }
      .text-input-field:hover { border-color: #21e6c298; }
      .text-input-field:focus { outline: none !important; border: 1px solid
      #21e6c1; } .text-input-field:active + .text-input-field-label,
      .text-input-field:focus + .text-input-field-label, .text-input-field:valid
      + .text-input-field-label { color: #021632; transform: translate(-4.5rem,
      -3rem) scale(0.7); } .text-input-field:active + .text-input-field-label-2,
      .text-input-field:focus + .text-input-field-label-2,
      .text-input-field:valid + .text-input-field-label-2 { color: #021632;
      transform: translate(-4.8rem, -3rem) scale(0.7); }
      .text-input-field:active:disabled + .text-input-field-label-2,
      .text-input-field:focus:disabled + .text-input-field-label-2,
      .text-input-field:valid:disabled + .text-input-field-label-2 { color:
      #fd5066; transform: none; } .text-input-field-label,
      .text-input-field-label-2 { position: absolute; padding-left: 3.5rem;
      color: #818da09c; cursor: text; transition: 250ms; }
      .text-input-field-note { display: flex; flex-direction: column;
      justify-content: center; font-size: 0.8rem; color: #818da09c; margin-top:
      2.25rem; } .label-error { color: #fd5066; transition: all 250ms
      ease-in-out; } .label-success { color: #021632; transition: all 250ms
      ease-in-out; } .prefix-ico { position: absolute; left: 0; padding-left:
      1rem; } .suffix-ico { position: absolute; right: 0.5rem; }
      .button-icon:hover { background-color: #818da017; } .prevent-select {
      -webkit-user-select: none; /* Safari */ -ms-user-select: none; /* IE 10
      and IE 11 */ user-select: none; /* Standard syntax */ } .container {
      width: fit-content; position: relative; padding-left: 35px; cursor:
      pointer; font-size: 22px; -webkit-user-select: none; -moz-user-select:
      none; -ms-user-select: none; user-select: none; } .container input {
      position: absolute; opacity: 0; cursor: pointer; height: 0; width: 0; }
      .checkmark { position: absolute; top: 0; left: 0; height: 25px; width:
      25px; background-color: #ffffff; border-radius: 5px; } .container:hover
      input ~ .checkmark { background-color: #818da017; transition: all 150ms
      ease-in-out; } .container input:checked ~ .checkmark { background-color:
      #21e6c1; } .checkmark:after { content: ""; position: absolute; display:
      none; } .container input:checked ~ .checkmark:after { display: block; }
      .container .checkmark:after { left: 9px; top: 5px; width: 5px; height:
      10px; border: solid #021632; border-width: 0 3px 3px 0; -webkit-transform:
      rotate(45deg); -ms-transform: rotate(45deg); transform: rotate(45deg); }
      .loader { width: 6.5rem; aspect-ratio: 1/1; padding: 0.75rem; background:
      #21e6c1; border-radius: 50%; --_m: conic-gradient(#0000, #000),
      linear-gradient(#000 0 0) content-box; -webkit-mask: var(--_m); mask:
      var(--_m); -webkit-mask-composite: source-out; mask-composite: subtract;
      box-sizing: border-box; animation: load 1s linear infinite; } @keyframes
      load { to { transform: rotate(1turn); } } .loader-contained { width: 100%;
      height: 100%; display: flex; align-items: center; justify-content: center;
      } .loader-container { background-color: #021632; position: absolute;
      height: 100%; overflow-y: hidden; inset: 0; top: 0; right: 0;
      background-color: rgba(0, 0, 0, 0.4392156863); backdrop-filter:
      blur(3.5px); width: 100%; z-index: 99999; } .pop-up-container { width:
      30rem; height: fit-content; background-color: #dbe3f0; z-index:
      9999999999; color: #021632; display: flex; flex-direction: column; }
      .pop-up-container.show { animation: grow 250ms cubic-bezier(0.5, -0.01, 0,
      1.3); animation-fill-mode: forwards; } .pop-up-container.hide { animation:
      shrink 250ms cubic-bezier(0.5, -0.01, 0, 1.3); animation-fill-mode:
      forwards; } .pop-up-header { height: fit-content; display: flex; gap:
      2.5rem; align-items: center; padding: 1.5rem 1.5rem 0 1.5rem; }
      .pop-up-header > :nth-child(2) { font-size: 1.75rem; font-weight: 700; }
      .pop-up-container > :nth-child(3) { margin-bottom: 2.5rem; }
      .pop-up-header-close { position: relative; width: 3.25rem; aspect-ratio:
      1/1; background: transparent; color: #021632; border-radius: 50rem;
      align-self: center; border: 0; cursor: pointer; transition: all 250ms
      ease-in-out; overflow: hidden; margin: 0; padding: 0; }
      .pop-up-header-close:disabled { background: transparent; color: #02163223;
      cursor: none; pointer-events: none; } .pop-up-header-close:hover {
      background: #818da017; transition: all 150ms ease-in-out; transform:
      scale(1.1); } .pop-up-content { word-wrap: break-word; white-space:
      -moz-pre-wrap; white-space: normal; line-height: 1.8rem; font-size:
      1.5rem; padding: 2rem 2rem 3rem 2rem; } span.ripple { position: absolute;
      aspect-ratio: 1/1; width: 3.75rem; border-radius: 50rem; transform:
      scale(0); animation: ripple 600ms linear; background-color: #02163250; }
      @keyframes ripple { to { transform: scale(4); opacity: 0; } } @keyframes
      grow { from { transform: scale(0); opacity: 0; } to { transform: scale(1);
      opacity: 1; } } @keyframes shrink { from { transform: scale(1); opacity:
      1; } to { transform: scale(0); opacity: 0; } } @media (min-width: 820px) {
      .contained { min-width: 10rem; } } @media (min-width: 768px) { .contained
      { min-width: 30rem; } } @media (min-width: 375px) { .contained {
      min-width: 10rem; } } @media (min-width: 280px) { .contained { min-width:
      15rem; } .card { line-height: 1.5rem; } } @media (min-width: 414px) {
      .contained { min-width: 30rem; } .card { line-height: 1.5rem; } } .shrink
      { animation: shrink 750ms cubic-bezier(0.5, -0.01, 0, 1.3);
      animation-fill-mode: forwards; } .hidden { display: none; } .link-footer {
      color: #e4ebf8; text-decoration: underline; } .link-footer:hover { color:
      #c5c7cb; transition: all 150ms ease-in-out; } .link-footer:active { color:
      rgb(66, 72, 66); }
    </style>
  </head>
  <body>
    <div class="main-container">
      <div id="loader-container">
        <div class="loader-contained">
          <div id="loader"></div>
          <div id="pop-up" class="pop-up-container">
            <div class="pop-up-header">
              <svg
                class="pop-up-header-ico"
                width="38"
                height="38"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M12 2C6.49 2 2 6.49 2 12C2 17.51 6.49 22 12 22C17.51 22 22 17.51 22 12C22 6.49 17.51 2 12 2ZM12 17C11.45 17 11 16.55 11 16C11 15.45 11.45 15 12 15C12.55 15 13 15.45 13 16C13 16.55 12.55 17 12 17ZM13 12C13 12.55 12.55 13 12 13C11.45 13 11 12.55 11 12V8C11 7.45 11.45 7 12 7C12.55 7 13 7.45 13 8V12Z"
                  fill="#FD5066"
                ></path>
              </svg>
              <div id="title" class="pop-up-header-title"></div>
            </div>
            <div id="message" class="pop-up-content"></div>
            <button
              tabindex="4"
              id="pop-up-dismiss"
              class="card-button prevent-select"
            >
              Dismiss
            </button>
          </div>
        </div>
      </div>
      <div class="contained">
        <div class="outer-container">
          <svg
            class="app-ico-svg"
            id="Layer_1"
            data-name="Layer 1"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 399.45 551.49"
          >
            <defs>
              <style>
                .cls-1 { fill: #e4ebf7; } .cls-2 { fill: #60c4b0; }
              </style>
            </defs>
            <polygon
              class="cls-1"
              points="272.64 107.76 272.64 0 126.81 0 126.81 107.76 0 107.76 0 215.52 126.81 215.52 272.64 215.52 399.45 215.52 399.45 107.76 272.64 107.76"
            ></polygon>
            <path class="cls-1" d="M126.81,336V443.73H0V336Z"></path>
            <polygon
              class="cls-2"
              points="272.64 335.96 272.64 443.73 126.81 443.73 126.81 551.49 272.64 551.49 399.45 551.49 399.45 443.73 399.45 335.96 272.64 335.96"
            ></polygon>
          </svg>
          <div class="outer-container-text">Task Tracker</div>
        </div>

        <div id="card" class="card">
          <div class="card-header">Create New Password</div>
          <div class="card-content">
            <form class="form-container">
              <div class="text-input">
                <svg
                  class="prefix-ico"
                  width="32"
                  height="32"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M17.5 10.24V7.25C17.5 4.49 15.26 2.25 12.5 2.25C9.74 2.25 7.5 4.49 7.5 7.25V10.24C6.02 10.98 5 12.49 5 14.25V17.25C5 19.73 7.02 21.75 9.5 21.75H15.5C17.98 21.75 20 19.73 20 17.25V14.25C20 12.49 18.98 10.98 17.5 10.24ZM13.5 16.25C13.5 16.8 13.05 17.25 12.5 17.25C11.95 17.25 11.5 16.8 11.5 16.25V15.25C11.5 14.7 11.95 14.25 12.5 14.25C13.05 14.25 13.5 14.7 13.5 15.25V16.25ZM15.5 9.75H9.5V7.25C9.5 5.6 10.85 4.25 12.5 4.25C14.15 4.25 15.5 5.6 15.5 7.25V9.75Z"
                    fill="#021632"
                  ></path>
                </svg>

                <input
                  type="password"
                  class="text-input-field"
                  required
                  autocomplete="off"
                  id="input"
                  tabindex="1"
                />
                <label id="label" class="text-input-field-label prevent-select">
                  <span>New Password</span>
                </label>
                <div class="suffix-ico">
                  <button
                    type="button"
                    id="input-clear"
                    class="pop-up-header-close hidden"
                    tabindex="-1"
                  >
                    <svg
                      width="16"
                      height="16"
                      viewBox="0 0 8 8"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M7.6066 0.535527C7.99763 0.926556 7.99692 1.55942 7.6066 1.94974L5.48528 4.07106L7.6066 6.19238C7.99763 6.58341 7.99692 7.21627 7.6066 7.60659C7.21628 7.99692 6.58342 7.99762 6.19239 7.6066L4.07107 5.48527L1.94975 7.60659C1.55942 7.99692 0.926563 7.99762 0.535534 7.60659C0.144504 7.21556 0.145211 6.5827 0.535534 6.19238L2.65685 4.07106L0.535534 1.94974C0.144504 1.55871 0.14521 0.92585 0.535533 0.535527C0.925856 0.145204 1.55872 0.144496 1.94975 0.535527L4.07107 2.65685L6.19239 0.535527C6.58271 0.145204 7.21557 0.144497 7.6066 0.535527Z"
                        fill="black"
                      ></path>
                    </svg>
                  </button>
                </div>
              </div>
              <div class="text-input">
                <svg
                  class="prefix-ico"
                  width="32"
                  height="32"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M17.5 10.24V7.25C17.5 4.49 15.26 2.25 12.5 2.25C9.74 2.25 7.5 4.49 7.5 7.25V10.24C6.02 10.98 5 12.49 5 14.25V17.25C5 19.73 7.02 21.75 9.5 21.75H15.5C17.98 21.75 20 19.73 20 17.25V14.25C20 12.49 18.98 10.98 17.5 10.24ZM13.5 16.25C13.5 16.8 13.05 17.25 12.5 17.25C11.95 17.25 11.5 16.8 11.5 16.25V15.25C11.5 14.7 11.95 14.25 12.5 14.25C13.05 14.25 13.5 14.7 13.5 15.25V16.25ZM15.5 9.75H9.5V7.25C9.5 5.6 10.85 4.25 12.5 4.25C14.15 4.25 15.5 5.6 15.5 7.25V9.75Z"
                    fill="#021632"
                  ></path>
                </svg>

                <input
                  type="password"
                  class="text-input-field"
                  required
                  autocomplete="off"
                  id="input2"
                  disabled="true"
                  tabindex="2"
                />
                <label
                  id="label2"
                  class="text-input-field-label-2 prevent-select"
                >
                  <span>Confirm Password</span>
                </label>
                <div class="suffix-ico">
                  <button
                    type="button"
                    id="input-clear-2"
                    class="pop-up-header-close hidden"
                    tabindex="-1"
                    disabled="true"
                  >
                    <svg
                      width="16"
                      height="16"
                      viewBox="0 0 8 8"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M7.6066 0.535527C7.99763 0.926556 7.99692 1.55942 7.6066 1.94974L5.48528 4.07106L7.6066 6.19238C7.99763 6.58341 7.99692 7.21627 7.6066 7.60659C7.21628 7.99692 6.58342 7.99762 6.19239 7.6066L4.07107 5.48527L1.94975 7.60659C1.55942 7.99692 0.926563 7.99762 0.535534 7.60659C0.144504 7.21556 0.145211 6.5827 0.535534 6.19238L2.65685 4.07106L0.535534 1.94974C0.144504 1.55871 0.14521 0.92585 0.535533 0.535527C0.925856 0.145204 1.55872 0.144496 1.94975 0.535527L4.07107 2.65685L6.19239 0.535527C6.58271 0.145204 7.21557 0.144497 7.6066 0.535527Z"
                        fill="black"
                      ></path>
                    </svg>
                  </button>
                </div>
              </div>
              <label class="container">
                Show password
                <input id="show-password" type="checkbox" />
                <span class="checkmark"></span>
              </label>
              <button
                type="submit"
                class="card-button prevent-select"
                disabled="true"
                tabindex="3"
              >
                Create
              </button>
            </form>

            <div id="validation-status" class="text-input-field-note">
              <div></div>
              <div></div>
              <div></div>
              <div></div>
              <div></div>
              <div></div>
            </div>
          </div>
          <div id="footer" class="card-footer"></div>
        </div>
        <div
          style="
            color: #e4ebf8;
            line-height: 180%;
            text-align: center;
            word-wrap: break-word;
            margin-top: 2.5rem;
            min-width: 30rem;
          "
        >
          <p class="prevent-select" style="line-height: 180%">
            © 2022-2023 Company®, All Rights Reserved<br />Address Address •
            Address Address • Address Address<br /><a
              class="link-footer"
              rel="noopener"
              href="#"
              target="_blank"
            >Contact Us</a>
            •
            <a class="link-footer" rel="noopener" href="#" target="_blank">Terms
              of Use</a>
            •
            <a
              class="link-footer"
              rel="noopener"
              href="#"
              target="_blank"
            >Privacy Policy</a>
          </p>
        </div>
      </div>
    </div>
    <script>
      const label1 = document.querySelector("#label"); const input1 =
      document.querySelector("#input"); const label2 =
      document.querySelector("#label2"); const input2 =
      document.querySelector("#input2"); const loaderContainer =
      document.querySelector("#loader-container"); const loader =
      document.querySelector("#loader"); const popUpContainer =
      document.querySelector("#pop-up"); popUpContainer.style.display = "none";
      const form = document.querySelector("form"); const clearBtn =
      document.getElementById("input-clear"); const clearBtn2 =
      document.getElementById("input-clear-2"); const dismissButton =
      document.querySelector("#pop-up-dismiss"); const submitButton =
      document.querySelector('button[type="submit"]'); const footerStatus =
      document.querySelector("#footer"); const validationStatus =
      document.querySelector("#validation-status"); const showPasswordCheckbox =
      document.querySelector("#show-password"); const cardShadow =
      document.querySelector("#card"); const uppercaseStatus =
      validationStatus?.querySelector(":nth-of-type(1)"); const lowercaseStatus
      = validationStatus?.querySelector(":nth-of-type(2)"); const numberStatus =
      validationStatus?.querySelector(":nth-of-type(3)"); const
      specialCharStatus = validationStatus?.querySelector(":nth-of-type(4)");
      const lengthStatus = validationStatus?.querySelector(":nth-of-type(5)");
      const matchStatus = validationStatus?.querySelector(":nth-of-type(6)");
      const uppercaseRegex = /[A-Z]/; const lowercaseRegex = /[a-z]/; const
      numberRegex = /[0-9]/; const specialCharRegex =
      /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/;
      clearBtn2.addEventListener("click", function (event) {
      createRipple(event); input2.value = ""; submitButton.disabled = "true";
      validationStatus.style.display = "block"; showPasswordCheckbox.checked =
      false; input1.type = "password"; input2.type = "password"; input2.focus();
      clearBtn2.classList.add("shrink"); clearBtn2.addEventListener(
      "animationend", function () { clearBtn2.classList.remove("shrink"); const
      spanRipple = clearBtn2.querySelector("span.ripple"); spanRipple.remove();
      clearBtn2.classList.add("hidden"); }, { once: true } );
      matchStatus.textContent = "Password does not match";
      matchStatus.classList.toggle("label-success", false);
      matchStatus.classList.toggle("label-error", true);
      footerStatus.classList.toggle("card-footer-success", false);
      footerStatus.classList.toggle("card-footer-error", true);
      cardShadow.classList.toggle("success-shadow", false);
      cardShadow.classList.toggle("error-shadow", true); });
      clearBtn.addEventListener("click", function (event) { createRipple(event);
      form.reset(); input1.value = ""; input2.value = "";
      showPasswordCheckbox.checked = false; input1.type = "password";
      input2.type = "password"; input1.focus();
      footerStatus.classList.toggle("card-footer-success", false);
      footerStatus.classList.toggle("card-footer-error", false);
      cardShadow.classList.toggle("success-shadow", false);
      cardShadow.classList.toggle("error-shadow", false);
      clearBtn.classList.add("shrink"); clearBtn.addEventListener(
      "animationend", function () { clearBtn.classList.remove("shrink"); const
      spanRipple = clearBtn.querySelector("span.ripple"); spanRipple.remove();
      clearBtn.classList.add("hidden"); }, { once: true } );
      submitButton.disabled = "true"; input2.disabled = "true";
      validationStatus.style.display = "none"; });
      input1.addEventListener("input", function () { if (input1.value !== "") {
      clearBtn.classList.remove("hidden"); } else {
      clearBtn.classList.add("hidden"); } }); input2.addEventListener("input",
      function () { if (input2.value !== "") {
      clearBtn2.classList.remove("hidden"); } else {
      clearBtn2.classList.add("hidden"); } }); label1.addEventListener("click",
      function () { input1.focus(); }); input1.addEventListener("click",
      function () { input1.focus(); }); label2.addEventListener("click",
      function () { input2.focus(); }); input2.addEventListener("click",
      function () { input2.focus(); });
      showPasswordCheckbox?.addEventListener("change", function () { if
      (showPasswordCheckbox.checked) { input1.type = "text"; input2.type =
      "text"; } else { input1.type = "password"; input2.type = "password"; } });
      input1.addEventListener("input", function (event) { input2.value = "";
      const password = input1.value; const password2 = input2.value; const
      isValidPassword = uppercaseRegex.test(password) &&
      lowercaseRegex.test(password) && numberRegex.test(password) &&
      specialCharRegex.test(password) && password.length >= 8 && password ===
      password2; const isValidInput = uppercaseRegex.test(password) &&
      lowercaseRegex.test(password) && numberRegex.test(password) &&
      specialCharRegex.test(password) && password.length >= 8; input2.disabled =
      !isValidInput; clearBtn2.disabled = !isValidInput; submitButton.disabled =
      !isValidPassword; footerStatus.classList.toggle("card-footer-success",
      isValidPassword); footerStatus.classList.toggle("card-footer-error",
      !isValidPassword); cardShadow.classList.toggle("success-shadow",
      isValidPassword); cardShadow.classList.toggle("error-shadow",
      !isValidPassword); validationStatus.style.display = "flex"; if
      (uppercaseStatus) { uppercaseStatus.textContent =
      uppercaseRegex.test(password) ? `Password contained an UPPERCASE` :
      `Password must have one (1) UPPERCASE`; uppercaseStatus.classList.toggle(
      "label-success", uppercaseRegex.test(password) );
      uppercaseStatus.classList.toggle( "label-error",
      !uppercaseRegex.test(password) ); } if (lowercaseStatus) {
      lowercaseStatus.textContent = lowercaseRegex.test(password) ? `Password
      contained a lowercase` : `Password must have one (1) lowercase`;
      lowercaseStatus.classList.toggle( "label-success",
      lowercaseRegex.test(password) ); lowercaseStatus.classList.toggle(
      "label-error", !lowercaseRegex.test(password) ); } if (numberStatus) {
      numberStatus.textContent = numberRegex.test(password) ? `Password
      contained a Number` : `Password must have one (1) number (0-9)`;
      numberStatus.classList.toggle( "label-success", numberRegex.test(password)
      ); numberStatus.classList.toggle( "label-error",
      !numberRegex.test(password) ); } if (specialCharStatus) {
      specialCharStatus.textContent = specialCharRegex.test(password) ?
      "Password contained a Special Character" : `Password must have one (1)
      Special Character (!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?)`;
      specialCharStatus.classList.toggle( "label-success",
      specialCharRegex.test(password) ); specialCharStatus.classList.toggle(
      "label-error", !specialCharRegex.test(password) ); } if (lengthStatus) {
      lengthStatus.textContent = password.length >= 8 ? `Password has atleast
      eight (8) characters` : `Password length must be more than or eight (8)`;
      lengthStatus.classList.toggle("label-success", password.length >= 8);
      lengthStatus.classList.toggle("label-error", password.length < 8); } if
      (matchStatus) { if (password != "" || password2 != "") {
      matchStatus.textContent = password === password2 ? `Password Matched` :
      `Password does not match`; matchStatus.classList.toggle( "label-success",
      password === password2 ); matchStatus.classList.toggle("label-error",
      password !== password2); } } submitButton.disabled = !isValidPassword;
      footerStatus.classList.toggle("card-footer-success", isValidPassword);
      footerStatus.classList.toggle("card-footer-error", !isValidPassword);
      cardShadow.classList.toggle("success-shadow", isValidPassword);
      cardShadow.classList.toggle("error-shadow", !isValidPassword); if
      (isValidPassword) { setTimeout(function () {
      validationStatus.style.display = "none"; }, 3000); } });
      input2.addEventListener("input", function (event) { const password =
      input1.value; const password2 = input2.value; const matchStatus =
      validationStatus?.querySelector(":nth-of-type(6)");
      validationStatus.style.display = "flex"; if (matchStatus) { if (password
      != "" || password2 != "") { matchStatus.textContent = password ===
      password2 ? "Password Matched" : "Password does not match";
      matchStatus.classList.toggle( "label-success", password === password2 );
      matchStatus.classList.toggle("label-error", password !== password2); } }
      const isValidPassword = uppercaseRegex.test(password) &&
      lowercaseRegex.test(password) && numberRegex.test(password) &&
      specialCharRegex.test(password) && password.length >= 8 && password ===
      password2; submitButton.disabled = !isValidPassword;
      footerStatus.classList.toggle("card-footer-success", isValidPassword);
      footerStatus.classList.toggle("card-footer-error", !isValidPassword);
      cardShadow.classList.toggle("success-shadow", isValidPassword);
      cardShadow.classList.toggle("error-shadow", !isValidPassword); if
      (isValidPassword) { validationStatus.style.display = "none"; } });
      submitButton.addEventListener("click", function (event) {
      createRipple(event); form.blur(); showPasswordCheckbox.checked = false;
      input1.type = "password"; input2.type = "password";
      loaderContainer.classList.toggle("loader-container", true);
      loader.classList.toggle("loader", true); });
      submitButton.addEventListener("keydown", function (event) { if (event.key
      === "Enter") { event.preventDefault(); form.blur(); submitButton.focus();
      showPasswordCheckbox.checked = false; input1.type = "password";
      input2.type = "password";
      loaderContainer.classList.toggle("loader-container", true);
      loader.classList.toggle("loader", true); form.dispatchEvent(new
      Event("submit")); } }); form.addEventListener("keydown", function (event)
      { if (event.key === "Enter") { event.preventDefault(); } });
      form.addEventListener("submit", async function (e) { e.preventDefault();
      submitButton.disabled = true; const formData = new FormData();
      formData.append("password", input2.value.trim()); const jsonObject =
      Object.fromEntries(formData.entries()); try { const response = await
      fetch("{{urlLink}}", { method: "PATCH", headers: { "Content-Type":
      "application/json", "X-API-Key": `{{headerApiKey}}`, "X-HMAC-Signature": `{{headerHmac}}`,
      "X-Timestamp": `{{headerTimeStamp}}`, }, body: JSON.stringify(jsonObject),
      }); const dat = await response.json(); if (response.status === 200) {
      document.getElementById("title").innerHTML = "Success";
      document.getElementById("message").innerHTML = dat.message;
      loader.classList.toggle("loader", false); popUpContainer.style.display =
      "flex"; popUpContainer.classList.toggle("show", true);
      dismissButton.focus(); form.reset(); } else if (response.status === 400) {
      document.getElementById("title").innerHTML = "Error";
      document.getElementById("message").innerHTML = dat.error;
      loader.classList.toggle("loader", false); popUpContainer.style.display =
      "flex"; popUpContainer.classList.toggle("show", true);
      dismissButton.focus(); } else { document.getElementById("title").innerHTML
      = "Error"; document.getElementById("message").innerHTML = dat.error;
      loader.classList.toggle("loader", false); popUpContainer.style.display =
      "flex"; popUpContainer.classList.toggle("show", true);
      dismissButton.focus(); } } catch (e) {
      document.getElementById("title").innerHTML = "Server: Error";
      document.getElementById("message").innerHTML = e;
      loader.classList.toggle("loader", false); popUpContainer.style.display =
      "flex"; popUpContainer.classList.toggle("show", true);
      dismissButton.focus(); } }); function createRipple(event) { const button =
      event.currentTarget; const buttonRect = button.getBoundingClientRect();
      const circle = document.createElement("span"); const diameter =
      Math.max(button.clientWidth, button.clientHeight); const radius = diameter
      / 2; const x = event.pageX - buttonRect.left - window.pageXOffset -
      radius; const y = event.pageY - buttonRect.top - window.pageYOffset -
      radius; circle.style.width = circle.style.height = `${diameter}px`;
      circle.style.left = `${x}px`; circle.style.top = `${y}px`;
      circle.classList.add("ripple"); const ripple =
      button.getElementsByClassName("ripple")[0]; if (ripple) { ripple.remove();
      } button.appendChild(circle); } dismissButton.addEventListener("click",
      function (event) { createRipple(event); submitButton.disabled = false;
      setTimeout(function () { popUpContainer.classList.add("hide");
      popUpContainer.addEventListener( "animationend", function () {
      loaderContainer.classList.toggle("loader-container", false);
      loader.classList.toggle("loader", false);
      popUpContainer.classList.remove("hide");
      popUpContainer.classList.remove("show"); const spanRipple =
      dismissButton.querySelector("span.ripple"); spanRipple.remove();
      popUpContainer.style.display = "none"; input1.focus();
      location.reload();}, { once: true } ); }, 175); });
    </script>
  </body>
</html>